{"ast":null,"code":"var _jsxFileName = \"D:\\\\Leads\\\\MyWork\\\\React 17 and ASP.NET Core 6\\\\Movies\\\\ForntEnd\\\\react-movies\\\\src\\\\movies\\\\MovieForm.tsx\";\nimport { Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport TextField from \"../form/TextField\";\nimport Button from \"../utils/Button/Button\";\nimport { Link } from \"react-router-dom\";\nimport ImageField from \"../form/ImageField\";\nimport DateField from \"../form/DateField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MovieForm(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: props.model,\n      onSubmit: (values, actions) => {\n        values.genresIds = selectedGenres.map(item => item.key);\n        values.movieTheatersIds = selectedMovieTheaters.map(item => item.key);\n        values.actors = selectedActors;\n        props.onSubmit(values, actions);\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().required('This field is required').firstLetterUppercase()\n      }),\n      children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Title\",\n          field: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CheckboxField, {\n          displayName: \"In Theaters\",\n          field: \"inTheaters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Trailer\",\n          field: \"trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DateField, {\n          displayName: \"Release Date\",\n          field: \"releaseDate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ImageField, {\n          displayName: \"Poster\",\n          field: \"poster\",\n          imageURL: props.model.posterURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Genres\",\n          nonSelected: nonSelectedGenres,\n          selected: selectedGenres,\n          onChange: (selected, nonSelected) => {\n            setSelectedGenres(selected);\n            setNonSelectedGenres(nonSelected);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Movie Theaters\",\n          nonSelected: nonSelectedMovieTheaters,\n          selected: selectedMovieTheaters,\n          onChange: (selected, nonSelected) => {\n            setSelectedMovieTheaters(selected);\n            setNonSelectedMovieTheaters(nonSelected);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TypeAheadActor, {\n          displayName: \"Actors\",\n          actors: selectedActors,\n          onAdd: actors => {\n            setSelectedActors(actors);\n          },\n          onRemove: actor => {\n            const actors = selectedActors.filter(x => x !== actor);\n            setSelectedActors(actors);\n          },\n          listUI: actor => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [actor.name, \" / \", /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Character\",\n              type: \"text\",\n              value: actor.character,\n              onChange: e => {\n                const index = selectedActors.findIndex(x => x.id === actor.id);\n                const actors = [...selectedActors];\n                actors[index].character = e.currentTarget.value;\n                setSelectedActors(actors);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-secondary\",\n          to: \"/genres\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c = MovieForm;\nvar _c;\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["Formik","Yup","TextField","Button","Link","ImageField","DateField","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieForm","props","children","initialValues","model","onSubmit","values","actions","genresIds","selectedGenres","map","item","key","movieTheatersIds","selectedMovieTheaters","actors","selectedActors","validationSchema","object","title","string","required","firstLetterUppercase","formikProps","Form","displayName","field","fileName","_jsxFileName","lineNumber","columnNumber","CheckboxField","imageURL","posterURL","MultipleSelector","nonSelected","nonSelectedGenres","selected","onChange","setSelectedGenres","setNonSelectedGenres","nonSelectedMovieTheaters","setSelectedMovieTheaters","setNonSelectedMovieTheaters","TypeAheadActor","onAdd","setSelectedActors","onRemove","actor","filter","x","listUI","name","placeholder","type","value","character","e","index","findIndex","id","currentTarget","disabled","isSubmitting","className","to","_c","$RefreshReg$"],"sources":["D:/Leads/MyWork/React 17 and ASP.NET Core 6/Movies/ForntEnd/react-movies/src/movies/MovieForm.tsx"],"sourcesContent":["import { Formik, FormikHelpers, FormikProps } from \"formik\";\r\nimport { movieCreationDTO } from \"./movies.module\";\r\nimport * as Yup from 'yup';\r\nimport TextField from \"../form/TextField\";\r\nimport Button from \"../utils/Button/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ImageField from \"../form/ImageField\";\r\nimport DateField from \"../form/DateField\";\r\nimport CheckBoxField from \"../form/CheckBoxField\";\r\nexport default function MovieForm(props: movieFormProps) {\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={props.model}\r\n                onSubmit={(values, actions) => {\r\n                    values.genresIds = selectedGenres.map(item => item.key);\r\n                    values.movieTheatersIds = selectedMovieTheaters.map(item => item.key);\r\n                    values.actors = selectedActors;\r\n                    props.onSubmit(values, actions)\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    title: Yup.string().required('This field is required').firstLetterUppercase()\r\n                })}\r\n            >\r\n                {(formikProps) => (\r\n                    <Form>\r\n\r\n                        <TextField displayName=\"Title\" field=\"title\" />\r\n                        <CheckboxField displayName=\"In Theaters\" field=\"inTheaters\" />\r\n                        <TextField displayName=\"Trailer\" field=\"trailer\" />\r\n                        <DateField displayName=\"Release Date\" field=\"releaseDate\" />\r\n                        <ImageField displayName=\"Poster\" field=\"poster\"\r\n                            imageURL={props.model.posterURL}\r\n                        />\r\n\r\n                        <MultipleSelector\r\n                            displayName=\"Genres\"\r\n                            nonSelected={nonSelectedGenres}\r\n                            selected={selectedGenres}\r\n                            onChange={(selected, nonSelected) => {\r\n                                setSelectedGenres(selected);\r\n                                setNonSelectedGenres(nonSelected);\r\n                            }}\r\n                        />\r\n\r\n                        <MultipleSelector\r\n                            displayName=\"Movie Theaters\"\r\n                            nonSelected={nonSelectedMovieTheaters}\r\n                            selected={selectedMovieTheaters}\r\n                            onChange={(selected, nonSelected) => {\r\n                                setSelectedMovieTheaters(selected);\r\n                                setNonSelectedMovieTheaters(nonSelected);\r\n                            }}\r\n                        />\r\n\r\n                        <TypeAheadActor displayName=\"Actors\" actors={selectedActors}\r\n                            onAdd={actors => {\r\n                                setSelectedActors(actors);\r\n                            }}\r\n                            onRemove={actor => {\r\n                                const actors = selectedActors.filter(x => x !== actor);\r\n                                setSelectedActors(actors);\r\n                            }}\r\n                            listUI={(actor: actorMovieDTO) =>\r\n                                <>\r\n                                    {actor.name} / <input placeholder=\"Character\" type=\"text\"\r\n                                        value={actor.character}\r\n                                        onChange={e => {\r\n                                            const index = selectedActors.findIndex(x => x.id === actor.id);\r\n\r\n                                            const actors = [...selectedActors];\r\n                                            actors[index].character = e.currentTarget.value;\r\n                                            setSelectedActors(actors);\r\n                                        }} />\r\n                                </>\r\n                            }\r\n                        />\r\n\r\n                        <Button disabled={formikProps.isSubmitting}\r\n                            type='submit'>Save Changes</Button>\r\n                        <Link className=\"btn btn-secondary\" to=\"/genres\">Cancel</Link>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\ninterface movieFormProps {\r\n    model: movieCreationDTO;\r\n    onSubmit(values: movieCreationDTO, actions: FormikHelpers<movieCreationDTO>): void;\r\n}"],"mappings":";AAAA,SAASA,MAAM,QAAoC,QAAQ;AAE3D,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,SAAS,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,eAAe,SAASC,SAASA,CAACC,KAAqB,EAAE;EACrD,oBACIJ,OAAA,CAAAE,SAAA;IAAAG,QAAA,eACIL,OAAA,CAACR,MAAM;MACHc,aAAa,EAAEF,KAAK,CAACG,KAAM;MAC3BC,QAAQ,EAAEA,CAACC,MAAM,EAAEC,OAAO,KAAK;QAC3BD,MAAM,CAACE,SAAS,GAAGC,cAAc,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;QACvDN,MAAM,CAACO,gBAAgB,GAAGC,qBAAqB,CAACJ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;QACrEN,MAAM,CAACS,MAAM,GAAGC,cAAc;QAC9Bf,KAAK,CAACI,QAAQ,CAACC,MAAM,EAAEC,OAAO,CAAC;MACnC,CAAE;MACFU,gBAAgB,EAAE3B,GAAG,CAAC4B,MAAM,CAAC;QACzBC,KAAK,EAAE7B,GAAG,CAAC8B,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,wBAAwB,CAAC,CAACC,oBAAoB,CAAC;MAChF,CAAC,CAAE;MAAApB,QAAA,EAEDqB,WAAW,iBACT1B,OAAA,CAAC2B,IAAI;QAAAtB,QAAA,gBAEDL,OAAA,CAACN,SAAS;UAACkC,WAAW,EAAC,OAAO;UAACC,KAAK,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC/CjC,OAAA,CAACkC,aAAa;UAACN,WAAW,EAAC,aAAa;UAACC,KAAK,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9DjC,OAAA,CAACN,SAAS;UAACkC,WAAW,EAAC,SAAS;UAACC,KAAK,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACnDjC,OAAA,CAACF,SAAS;UAAC8B,WAAW,EAAC,cAAc;UAACC,KAAK,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5DjC,OAAA,CAACH,UAAU;UAAC+B,WAAW,EAAC,QAAQ;UAACC,KAAK,EAAC,QAAQ;UAC3CM,QAAQ,EAAE/B,KAAK,CAACG,KAAK,CAAC6B;QAAU;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC,eAEFjC,OAAA,CAACqC,gBAAgB;UACbT,WAAW,EAAC,QAAQ;UACpBU,WAAW,EAAEC,iBAAkB;UAC/BC,QAAQ,EAAE5B,cAAe;UACzB6B,QAAQ,EAAEA,CAACD,QAAQ,EAAEF,WAAW,KAAK;YACjCI,iBAAiB,CAACF,QAAQ,CAAC;YAC3BG,oBAAoB,CAACL,WAAW,CAAC;UACrC;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEFjC,OAAA,CAACqC,gBAAgB;UACbT,WAAW,EAAC,gBAAgB;UAC5BU,WAAW,EAAEM,wBAAyB;UACtCJ,QAAQ,EAAEvB,qBAAsB;UAChCwB,QAAQ,EAAEA,CAACD,QAAQ,EAAEF,WAAW,KAAK;YACjCO,wBAAwB,CAACL,QAAQ,CAAC;YAClCM,2BAA2B,CAACR,WAAW,CAAC;UAC5C;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEFjC,OAAA,CAAC+C,cAAc;UAACnB,WAAW,EAAC,QAAQ;UAACV,MAAM,EAAEC,cAAe;UACxD6B,KAAK,EAAE9B,MAAM,IAAI;YACb+B,iBAAiB,CAAC/B,MAAM,CAAC;UAC7B,CAAE;UACFgC,QAAQ,EAAEC,KAAK,IAAI;YACf,MAAMjC,MAAM,GAAGC,cAAc,CAACiC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKF,KAAK,CAAC;YACtDF,iBAAiB,CAAC/B,MAAM,CAAC;UAC7B,CAAE;UACFoC,MAAM,EAAGH,KAAoB,iBACzBnD,OAAA,CAAAE,SAAA;YAAAG,QAAA,GACK8C,KAAK,CAACI,IAAI,EAAC,KAAG,eAAAvD,OAAA;cAAOwD,WAAW,EAAC,WAAW;cAACC,IAAI,EAAC,MAAM;cACrDC,KAAK,EAAEP,KAAK,CAACQ,SAAU;cACvBlB,QAAQ,EAAEmB,CAAC,IAAI;gBACX,MAAMC,KAAK,GAAG1C,cAAc,CAAC2C,SAAS,CAACT,CAAC,IAAIA,CAAC,CAACU,EAAE,KAAKZ,KAAK,CAACY,EAAE,CAAC;gBAE9D,MAAM7C,MAAM,GAAG,CAAC,GAAGC,cAAc,CAAC;gBAClCD,MAAM,CAAC2C,KAAK,CAAC,CAACF,SAAS,GAAGC,CAAC,CAACI,aAAa,CAACN,KAAK;gBAC/CT,iBAAiB,CAAC/B,MAAM,CAAC;cAC7B;YAAE;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA,eACX;QACL;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eAEFjC,OAAA,CAACL,MAAM;UAACsE,QAAQ,EAAEvC,WAAW,CAACwC,YAAa;UACvCT,IAAI,EAAC,QAAQ;UAAApD,QAAA,EAAC;QAAY;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvCjC,OAAA,CAACJ,IAAI;UAACuE,SAAS,EAAC,mBAAmB;UAACC,EAAE,EAAC,SAAS;UAAA/D,QAAA,EAAC;QAAM;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D;IACT;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC,gBACX,CAAC;AAGX;AAACoC,EAAA,GA9EuBlE,SAAS;AAAA,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}