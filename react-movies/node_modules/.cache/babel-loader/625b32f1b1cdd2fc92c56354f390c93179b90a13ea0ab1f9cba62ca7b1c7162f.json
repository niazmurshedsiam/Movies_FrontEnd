{"ast":null,"code":"var _jsxFileName = \"D:\\\\Leads\\\\MyWork\\\\React 17 and ASP.NET Core 6\\\\Movies\\\\ForntEnd\\\\react-movies\\\\src\\\\movies\\\\MovieForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport TextField from \"../form/TextField\";\nimport Button from \"../utils/Button/Button\";\nimport { Link } from \"react-router-dom\";\nimport ImageField from \"../form/ImageField\";\nimport DateField from \"../form/DateField\";\nimport CheckBoxField from \"../form/CheckBoxField\";\nimport MultipleSelector from \"../form/MultipleSelector\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MovieForm(props) {\n  _s();\n  const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\n  const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\n  const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\n  const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\n  function mapToModel(items) {\n    return items.map(item => {\n      return {\n        key: item.id,\n        value: item.name\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: props.model,\n      onSubmit: (values, actions) => {\n        values.genresIds = selectedGenres.map(item => item.key);\n        props.onSubmit(values, actions);\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().required('This field is required').firstLetterUpperCase()\n      }),\n      children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Title\",\n          field: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CheckBoxField, {\n          displayName: \"In Theaters\",\n          field: \"inTheaters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Trailer\",\n          field: \"trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DateField, {\n          displayName: \"Release Date\",\n          field: \"releaseDate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ImageField, {\n          displayName: \"Poster\",\n          field: \"poster\",\n          imageURL: props.model.posterURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Genres\",\n          nonSelected: nonSelectedGenres,\n          selected: selectedGenres,\n          onChange: (selected, nonSelected) => {\n            setSelectedGenres(selectedGenres);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-secondary\",\n          to: \"/genres\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(MovieForm, \"fBU0qiUL4uzyr7AE9fPR7M1V2W4=\");\n_c = MovieForm;\nvar _c;\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["Form","Formik","Yup","TextField","Button","Link","ImageField","DateField","CheckBoxField","MultipleSelector","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieForm","props","_s","selectedGenres","setSelectedGenres","mapToModel","nonSelectedGenres","setNonSelectedGenres","selectedMovieTheaters","setSelectedMovieTheaters","nonSelectedMovieTheaters","setNonSelectedMovieTheaters","items","map","item","key","id","value","name","children","initialValues","model","onSubmit","values","actions","genresIds","validationSchema","object","title","string","required","firstLetterUpperCase","formikProps","displayName","field","fileName","_jsxFileName","lineNumber","columnNumber","imageURL","posterURL","nonSelected","selected","onChange","disabled","isSubmitting","type","className","to","_c","$RefreshReg$"],"sources":["D:/Leads/MyWork/React 17 and ASP.NET Core 6/Movies/ForntEnd/react-movies/src/movies/MovieForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers, FormikProps } from \"formik\";\r\nimport { movieCreationDTO, moviesDTO } from \"./movies.module\";\r\nimport * as Yup from 'yup';\r\nimport TextField from \"../form/TextField\";\r\nimport Button from \"../utils/Button/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ImageField from \"../form/ImageField\";\r\nimport DateField from \"../form/DateField\";\r\nimport CheckBoxField from \"../form/CheckBoxField\";\r\nimport MultipleSelector, { multipleSelectorModel } from \"../form/MultipleSelector\";\r\nimport { useState } from \"react\";\r\nimport { genreDTO } from \"../genres/genres.model\";\r\nexport default function MovieForm(props: movieFormProps) {\r\n\r\n    const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\r\n    const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\r\n\r\n    const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\r\n    const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\r\n\r\n\r\n    function mapToModel(items: { id: number, name: string }[]): multipleSelectorModel[] {\r\n        return items.map(item => {\r\n            return { key: item.id, value: item.name }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={props.model}\r\n                onSubmit={(values, actions) => {\r\n                    values.genresIds = selectedGenres.map(item => item.key)\r\n                    props.onSubmit(values, actions)\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    title: Yup.string().required('This field is required').firstLetterUpperCase()\r\n                })}\r\n            >\r\n                {(formikProps) => (\r\n                    <Form>\r\n\r\n                        <TextField displayName=\"Title\" field=\"title\" />\r\n                        <CheckBoxField displayName=\"In Theaters\" field=\"inTheaters\" />\r\n                        <TextField displayName=\"Trailer\" field=\"trailer\" />\r\n                        <DateField displayName=\"Release Date\" field=\"releaseDate\" />\r\n                        <ImageField displayName=\"Poster\" field=\"poster\"\r\n                            imageURL={props.model.posterURL}\r\n                        />\r\n                        <MultipleSelector\r\n                            displayName=\"Genres\"\r\n                            nonSelected={nonSelectedGenres}\r\n                            selected={selectedGenres}\r\n                            onChange={(selected, nonSelected) => {\r\n                                setSelectedGenres(selectedGenres);\r\n                            }}\r\n                        ></MultipleSelector>\r\n                        <Button disabled={formikProps.isSubmitting}\r\n                            type='submit'>Save Changes</Button>\r\n                        <Link className=\"btn btn-secondary\" to=\"/genres\">Cancel</Link>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\ninterface movieFormProps {\r\n    model: movieCreationDTO;\r\n    onSubmit(values: movieCreationDTO, actions: FormikHelpers<movieCreationDTO>): void;\r\n    selectedGenres: genreDTO[];\r\n    nonSelectedGenres: genreDTO[];\r\n    selectedMovieTheaters: moviesDTO[];\r\n    nonSelectedMovieTheaters: moviesDTO[];\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}