{"ast":null,"code":"var _jsxFileName = \"D:\\\\Leads\\\\MyWork\\\\React 17 and ASP.NET Core 6\\\\Movies\\\\ForntEnd\\\\react-movies\\\\src\\\\movies\\\\MovieForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport TextField from \"../form/TextField\";\nimport Button from \"../utils/Button/Button\";\nimport { Link } from \"react-router-dom\";\nimport ImageField from \"../form/ImageField\";\nimport DateField from \"../form/DateField\";\nimport CheckBoxField from \"../form/CheckBoxField\";\nimport MultipleSelector from \"../form/MultipleSelector\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MovieForm(props) {\n  _s();\n  const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\n  function mapToModel(items) {\n    return items.map(item => {\n      return {\n        key: item.id,\n        value: item.name\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: props.model,\n      onSubmit: props.onSubmit,\n      validationSchema: Yup.object({\n        title: Yup.string().required('This field is required').firstLetterUpperCase()\n      }),\n      children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Title\",\n          field: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CheckBoxField, {\n          displayName: \"In Theaters\",\n          field: \"inTheaters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Trailer\",\n          field: \"trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DateField, {\n          displayName: \"Release Date\",\n          field: \"releaseDate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ImageField, {\n          displayName: \"Poster\",\n          field: \"poster\",\n          imageURL: props.model.posterURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Genres\",\n          nonSelected: [],\n          selected: [],\n          onChange: (selected, nonSelected) => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-secondary\",\n          to: \"/genres\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(MovieForm, \"uf+ijOpBuEYKd9nrO38KVzafSOw=\");\n_c = MovieForm;\nvar _c;\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["Form","Formik","Yup","TextField","Button","Link","ImageField","DateField","CheckBoxField","MultipleSelector","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieForm","props","_s","selectedGenres","setSelectedGenres","mapToModel","items","map","item","key","id","value","name","children","initialValues","model","onSubmit","validationSchema","object","title","string","required","firstLetterUpperCase","formikProps","displayName","field","fileName","_jsxFileName","lineNumber","columnNumber","imageURL","posterURL","nonSelected","selected","onChange","disabled","isSubmitting","type","className","to","_c","$RefreshReg$"],"sources":["D:/Leads/MyWork/React 17 and ASP.NET Core 6/Movies/ForntEnd/react-movies/src/movies/MovieForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers, FormikProps } from \"formik\";\r\nimport { movieCreationDTO } from \"./movies.module\";\r\nimport * as Yup from 'yup';\r\nimport TextField from \"../form/TextField\";\r\nimport Button from \"../utils/Button/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ImageField from \"../form/ImageField\";\r\nimport DateField from \"../form/DateField\";\r\nimport CheckBoxField from \"../form/CheckBoxField\";\r\nimport MultipleSelector, { multipleSelectorModel } from \"../form/MultipleSelector\";\r\nimport { useState } from \"react\";\r\nexport default function MovieForm(props: movieFormProps) {\r\n\r\n    const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\r\n\r\n    function mapToModel(items: { id: number, name: string }[]): multipleSelectorModel[] {\r\n        return items.map(item => {\r\n            return { key: item.id, value: item.name }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={props.model}\r\n                onSubmit={props.onSubmit}\r\n                validationSchema={Yup.object({\r\n                    title: Yup.string().required('This field is required').firstLetterUpperCase()\r\n                })}\r\n            >\r\n                {(formikProps) => (\r\n                    <Form>\r\n\r\n                        <TextField displayName=\"Title\" field=\"title\" />\r\n                        <CheckBoxField displayName=\"In Theaters\" field=\"inTheaters\" />\r\n                        <TextField displayName=\"Trailer\" field=\"trailer\" />\r\n                        <DateField displayName=\"Release Date\" field=\"releaseDate\" />\r\n                        <ImageField displayName=\"Poster\" field=\"poster\"\r\n                            imageURL={props.model.posterURL}\r\n                        />\r\n                        <MultipleSelector\r\n                            displayName=\"Genres\"\r\n                            nonSelected={[]}\r\n                            selected={[]}\r\n                            onChange={(selected, nonSelected) => {\r\n\r\n                            }}\r\n                        ></MultipleSelector>\r\n                        <Button disabled={formikProps.isSubmitting}\r\n                            type='submit'>Save Changes</Button>\r\n                        <Link className=\"btn btn-secondary\" to=\"/genres\">Cancel</Link>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\ninterface movieFormProps {\r\n    model: movieCreationDTO;\r\n    onSubmit(values: movieCreationDTO, actions: FormikHelpers<movieCreationDTO>): void;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}